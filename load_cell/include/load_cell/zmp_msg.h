// Generated by gencpp from file load_cell/zmp_msg.msg
// DO NOT EDIT!


#ifndef LOAD_CELL_MESSAGE_ZMP_MSG_H
#define LOAD_CELL_MESSAGE_ZMP_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace load_cell
{
template <class ContainerAllocator>
struct zmp_msg_
{
  typedef zmp_msg_<ContainerAllocator> Type;

  zmp_msg_()
    : Left_X_zmp(0.0)
    , Left_Y_zmp(0.0)
    , Right_X_zmp(0.0)
    , Right_Y_zmp(0.0)
    , Total_X_zmp(0.0)
    , Total_Y_zmp(0.0)  {
    }
  zmp_msg_(const ContainerAllocator& _alloc)
    : Left_X_zmp(0.0)
    , Left_Y_zmp(0.0)
    , Right_X_zmp(0.0)
    , Right_Y_zmp(0.0)
    , Total_X_zmp(0.0)
    , Total_Y_zmp(0.0)  {
  (void)_alloc;
    }



   typedef double _Left_X_zmp_type;
  _Left_X_zmp_type Left_X_zmp;

   typedef double _Left_Y_zmp_type;
  _Left_Y_zmp_type Left_Y_zmp;

   typedef double _Right_X_zmp_type;
  _Right_X_zmp_type Right_X_zmp;

   typedef double _Right_Y_zmp_type;
  _Right_Y_zmp_type Right_Y_zmp;

   typedef double _Total_X_zmp_type;
  _Total_X_zmp_type Total_X_zmp;

   typedef double _Total_Y_zmp_type;
  _Total_Y_zmp_type Total_Y_zmp;





  typedef boost::shared_ptr< ::load_cell::zmp_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::load_cell::zmp_msg_<ContainerAllocator> const> ConstPtr;

}; // struct zmp_msg_

typedef ::load_cell::zmp_msg_<std::allocator<void> > zmp_msg;

typedef boost::shared_ptr< ::load_cell::zmp_msg > zmp_msgPtr;
typedef boost::shared_ptr< ::load_cell::zmp_msg const> zmp_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::load_cell::zmp_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::load_cell::zmp_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace load_cell

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'load_cell': ['/home/robit/catkin_ws/src/load_cell/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::load_cell::zmp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::load_cell::zmp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::load_cell::zmp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::load_cell::zmp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::load_cell::zmp_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::load_cell::zmp_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::load_cell::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "400c0cbbef81b9d89d191dbc6ab2a389";
  }

  static const char* value(const ::load_cell::zmp_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x400c0cbbef81b9d8ULL;
  static const uint64_t static_value2 = 0x9d191dbc6ab2a389ULL;
};

template<class ContainerAllocator>
struct DataType< ::load_cell::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "load_cell/zmp_msg";
  }

  static const char* value(const ::load_cell::zmp_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::load_cell::zmp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Left_X_zmp\n\
float64 Left_Y_zmp\n\
float64 Right_X_zmp\n\
float64 Right_Y_zmp\n\
float64 Total_X_zmp\n\
float64 Total_Y_zmp\n\
";
  }

  static const char* value(const ::load_cell::zmp_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::load_cell::zmp_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Left_X_zmp);
      stream.next(m.Left_Y_zmp);
      stream.next(m.Right_X_zmp);
      stream.next(m.Right_Y_zmp);
      stream.next(m.Total_X_zmp);
      stream.next(m.Total_Y_zmp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct zmp_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::load_cell::zmp_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::load_cell::zmp_msg_<ContainerAllocator>& v)
  {
    s << indent << "Left_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Left_X_zmp);
    s << indent << "Left_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Left_Y_zmp);
    s << indent << "Right_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Right_X_zmp);
    s << indent << "Right_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Right_Y_zmp);
    s << indent << "Total_X_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Total_X_zmp);
    s << indent << "Total_Y_zmp: ";
    Printer<double>::stream(s, indent + "  ", v.Total_Y_zmp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LOAD_CELL_MESSAGE_ZMP_MSG_H
